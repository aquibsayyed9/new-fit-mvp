import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // Ensure this is set in your environment variables
});

export const generateWorkoutPlan = async (userData: any) => {
    const prompt = `Create a personalized workout plan for a ${userData.fitnessLevel} level individual who wants to ${userData.goal}. They have the following equipment available: ${userData.equipment}. The plan should focus on ${userData.focus}.

Please return the workout plan in the following JSON format:

{
  "planName": "Full Body Weight Loss Plan",
  "fitnessLevel": "${userData.fitnessLevel}",
  "goal": "${userData.goal}",
  "duration": "4 weeks", // Specify duration of the workout plan
  "equipment": ["dumbbells", "yoga mat"], // List of equipment available for the workout
  "exercises": [
    {
      "name": "Exercise Name", // Name of the exercise
      "type": "strength", // Type of exercise (e.g., strength, cardio)
      "workingsets": 3, // Number of working sets
      "warmupsets": 1, // Number of warm-up sets
      "recommendedReps": 12, // Number of reps recommended for each set
      "restTimeBetweenSets": "60 seconds", // Rest time between sets
      "instructions": "Exercise instructions here", // Detailed instructions for performing the exercise
      "primaryMuscleGroup": "chest", // Primary muscle group targeted
      "secondaryMuscleGroup": ["shoulders", "triceps"], // Secondary muscle groups targeted
      "durationPerExercise": "5 minutes", // Optional: Duration per exercise (if time-based)
      "equipmentNeeded": ["dumbbells"], // Equipment needed for the exercise
      "exerciseImageUrl": "https://example.com/image.jpg" // Optional: URL for an image of the exercise
    },
    // Add more exercises here...
  ],
  "cooldown": {
    "description": "Cool down routine", // Description of the cooldown
    "exercises": [
      {
        "name": "Stretching",
        "duration": "5 minutes",
        "instructions": "Instructions for cool down"
      }
    ]
  }
}

Make sure all fields are filled with appropriate values, and the exercises list is tailored to achieve the user's fitness goal and suit their level and available equipment.`;


  // Correcting to use the chat endpoint
  const response = await openai.chat.completions.create({
    model: "gpt-3.5-turbo", // Use the chat model
    messages: [{ role: "user", content: prompt }],
    max_tokens: 300, // Adjust based on the expected length of the response
  });

  const message = response.choices[0]?.message?.content; // Add optional chaining to handle null checks

  if (!message) {
    throw new Error('No content generated by the model.');
  }

  return message.trim();
};

export const generateDietPlan = async (userData: any) => {
    const prompt = `Create a personalized diet plan for a ${userData.dietaryPreferences} person who wants to achieve ${userData.goal} within ${userData.timeframe}. The plan should include foods like ${userData.availableFoods}.

    Please return the diet plan in the following JSON format:
    
    {
      "planName": "Vegetarian Muscle Gain Plan",
      "goal": "${userData.goal}",
      "timeframe": "${userData.timeframe}", // Timeframe for the diet plan
      "caloricIntake": 2500, // Daily caloric intake recommendation
      "macronutrientDistribution": { // Macronutrient distribution as percentages
        "protein": 30,
        "carbohydrates": 50,
        "fats": 20
      },
      "meals": [
        {
          "mealName": "Breakfast", // Name of the meal
          "time": "8:00 AM", // Recommended time for the meal
          "items": [
            {
              "name": "Oatmeal with Berries", // Food item name
              "quantity": "1 bowl", // Quantity
              "calories": 300, // Calories for the food item
              "macros": { // Macronutrients for the food item
                "protein": 10,
                "carbohydrates": 50,
                "fats": 5
              }
            },
            // Add more food items here...
          ],
          "totalCalories": 500 // Total calories for the meal
        },
        // Add more meals (lunch, dinner, snacks) here...
      ],
      "hydrationRecommendation": "Drink at least 2 liters of water per day", // Optional: Hydration recommendation
      "supplements": ["Multivitamin", "Protein powder"], // Optional: Supplements recommended
      "specialInstructions": "Avoid sugary drinks and processed foods." // Optional: Any special instructions or restrictions
    }
    
    Make sure all fields are filled with appropriate values, and the meals are designed to achieve the user's dietary goal, including consideration for their preferences and available foods.`;
    

  const response = await openai.chat.completions.create({
    model: "gpt-3.5-turbo", // Use the chat model
    messages: [{ role: "user", content: prompt }],
    max_tokens: 300, // Adjust based on the expected length of the response
  });

  const message = response.choices[0]?.message?.content; // Add optional chaining to handle null checks

  if (!message) {
    throw new Error('No content generated by the model.');
  }

  return message.trim();
};
